"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const util_1 = require("./util");
(0, globals_1.test)('findSlugInCategory', () => {
    const doc = {
        slug: 'slug',
        children: []
    };
    (0, globals_1.expect)((0, util_1.findSlugInCategory)({
        category: null,
        docs: [doc]
    }, 'slug')).toBe(doc);
    (0, globals_1.expect)((0, util_1.findSlugInCategory)({
        category: null,
        docs: [{
                slug: 'a',
                children: [{
                        slug: 'b',
                        children: [
                            {
                                slug: 'c',
                                children: []
                            },
                            doc
                        ]
                    }]
            }]
    }, 'slug')).toBe(doc);
    (0, globals_1.expect)((0, util_1.findSlugInCategory)({
        category: null,
        docs: [{
                slug: 'a',
                children: [{
                        slug: 'b',
                        children: [
                            {
                                slug: 'c',
                                children: []
                            },
                            {
                                slug: 'd',
                                children: [],
                            }
                        ]
                    }]
            }]
    }, 'slug')).toBe(null);
});
(0, globals_1.test)('removeSlugFromTree', () => {
    const b = {
        slug: 'b',
        children: [],
    };
    const a = {
        slug: 'a',
        children: [b],
    };
    const tree = {
        category: null,
        docs: [a],
    };
    (0, globals_1.expect)((0, util_1.removeSlugFromTree)(tree, 'd')).toBeNull();
    (0, globals_1.expect)((0, util_1.removeSlugFromTree)(tree, 'b')).toBe(b);
    (0, globals_1.expect)(a.children).toHaveLength(0);
    (0, globals_1.expect)((0, util_1.removeSlugFromTree)(tree, 'a')).toBe(a);
    (0, globals_1.expect)(tree.docs).toHaveLength(0);
});
(0, globals_1.test)('addDocUnderSlug', () => {
    const tree = {
        category: null,
        docs: [{
                slug: 'a',
                children: [
                    {
                        slug: 'b',
                        children: []
                    },
                    {
                        slug: 'c',
                        children: []
                    }
                ]
            }]
    };
    const newDoc = {
        slug: 'd',
        children: []
    };
    (0, globals_1.expect)((0, util_1.addDocUnderSlug)(tree, newDoc, 'c')).toBeTruthy();
    (0, globals_1.expect)(tree.docs[0].children[1].children[0]).toBe(newDoc);
    (0, globals_1.expect)((0, util_1.addDocUnderSlug)(tree, {
        slug: 'x',
        children: []
    }, 'g')).toBeFalsy();
    (0, globals_1.expect)((0, util_1.addDocUnderSlug)(tree, {
        slug: 'x',
        children: []
    }, null)).toBe(true);
    (0, globals_1.expect)(tree.docs[1].slug).toBe('x');
});
